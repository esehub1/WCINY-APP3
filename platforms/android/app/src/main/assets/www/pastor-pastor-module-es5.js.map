{"version":3,"sources":["webpack:///src/app/pastor/pastor.page.html","webpack:///src/app/pastor/pastor-routing.module.ts","webpack:///src/app/pastor/pastor.module.ts","webpack:///src/app/pastor/pastor.page.scss","webpack:///src/app/pastor/pastor.page.ts"],"names":["routes","path","component","PastorPageRoutingModule","imports","forChild","exports","PastorPageModule","declarations","PastorPage","formBuilder","apiCall","toastCtrl","submitAttempt","scheduleForm","valid","console","log","value","postData","opt","sendData","subscribe","data","presentToast","err","msg","create","message","duration","position","toast","present","onDidDismiss","then","val","group","fname","compose","maxLength","pattern","required","lname","email","phone","comment","contact_date","contact_time","selector","template"],"mappings":"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","file":"pastor-pastor-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"winners-red\\\">\\n    <ion-text>\\n      <div class=\\\"ion-text-wrap ion-text-end ion-padding\\\">\\n        WINNERS CHAPEL INT'L <br> NEW YORK\\n      </div>\\n    </ion-text>\\n    <ion-buttons slot=\\\"start\\\" style=\\\"flex-flow: column\\\">\\n      <ion-menu-button></ion-menu-button>\\n      <ion-back-button text=\\\"Back\\\" icon=\\\"caret-back\\\"></ion-back-button>\\n    </ion-buttons>\\n    <img src=\\\"assets/img/logo22.png\\\" alt=\\\"\\\" slot=\\\"end\\\" width=\\\"70vw\\\" class=\\\"ion-padding-vertical ion-padding-end\\\">\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-item color=\\\"light\\\">\\n    <div class=\\\"ion-text-left\\\">\\n      <h5 style=\\\"font-weight: bold\\\">SCHEDULE APPOINTMENT</h5>\\n    </div>\\n  </ion-item>\\n  <ion-list class=\\\"remove-top\\\">\\n <!--   <img class=\\\"middlelogo\\\" src=\\\"assets/img/prayer.png\\\" alt=\\\"\\\">-->\\n    <form [formGroup]=\\\"scheduleForm\\\">\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\" >First Name:</ion-label>\\n        <ion-input formControlName=\\\"fname\\\" type=\\\"text\\\" [class.invalid]=\\\"!scheduleForm.controls.fname.valid && (scheduleForm.controls.fname.dirty || submitAttempt)\\\"></ion-input>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.fname.valid  && (scheduleForm.controls.fname.dirty || submitAttempt)\\\">\\n        <p>Please enter your first name.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\" >Last Name:</ion-label>\\n        <ion-input formControlName=\\\"lname\\\" type=\\\"text\\\" [class.invalid]=\\\"!scheduleForm.controls.lname.valid && (scheduleForm.controls.lname.dirty || submitAttempt)\\\"></ion-input>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.lname.valid  && (scheduleForm.controls.lname.dirty || submitAttempt)\\\">\\n        <p>Please enter your last name.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Email:</ion-label>\\n        <ion-input formControlName=\\\"email\\\" type=\\\"email\\\" [class.invalid]=\\\"!scheduleForm.controls.email.valid && (scheduleForm.controls.email.dirty || submitAttempt)\\\"></ion-input>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.email.valid  && (scheduleForm.controls.email.dirty || submitAttempt)\\\">\\n        <p>Please enter a valid email address.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\" >Phone:</ion-label>\\n        <ion-input formControlName=\\\"phone\\\" [brmasker]=\\\"{mask: '(000)-000-0000', type:'num', len:14}\\\" type=\\\"tel\\\" [class.invalid]=\\\"!scheduleForm.controls.phone.valid && (scheduleForm.controls.phone.dirty || submitAttempt)\\\"></ion-input>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.phone.valid  && (scheduleForm.controls.phone.dirty || submitAttempt)\\\">\\n        <p>Please enter your phone number.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Purpose / Information:</ion-label>\\n        <ion-textarea autoGrow=\\\"true\\\" formControlName=\\\"comment\\\" [class.invalid]=\\\"!scheduleForm.controls.comment.valid && (scheduleForm.controls.comment.dirty || submitAttempt)\\\"></ion-textarea>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.comment.valid  && (scheduleForm.controls.comment.dirty || submitAttempt)\\\">\\n        <p>Please enter purpose / information.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Best Contact Date:</ion-label>\\n        <ion-datetime formControlName=\\\"contact_date\\\" displayFormat=\\\"DD MMMM YYYY\\\" [class.invalid]=\\\"!scheduleForm.controls.contact_date.valid && (scheduleForm.controls.contact_date.dirty || submitAttempt)\\\"></ion-datetime>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.contact_date.valid  && (scheduleForm.controls.contact_date.dirty || submitAttempt)\\\">\\n        <p>Please enter best contact date.</p>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"stacked\\\">Best Contact Time:</ion-label>\\n        <ion-datetime formControlName=\\\"contact_time\\\" displayFormat=\\\"hh:mm A\\\" [class.invalid]=\\\"!scheduleForm.controls.contact_time.valid && (scheduleForm.controls.contact_time.dirty || submitAttempt)\\\"></ion-datetime>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"!scheduleForm.controls.contact_time.valid  && (scheduleForm.controls.contact_time.dirty || submitAttempt)\\\">\\n        <p>Please enter best contact time.</p>\\n      </ion-item>\\n      <ion-row>\\n        <ion-col size=\\\"6\\\">\\n          <section>\\n            <ion-button color=\\\"winners-red\\\" expand=\\\"block\\\" slot=\\\"start\\\" (click)=\\\"save()\\\">\\n              Submit\\n            </ion-button>\\n          </section>\\n        </ion-col>\\n        <ion-col size=\\\"6\\\">\\n          <section>\\n            <ion-button color=\\\"light\\\" expand=\\\"block\\\" slot=\\\"start\\\" [routerLink]=\\\"['','socials']\\\" routerDirection=\\\"back\\\">\\n              Cancel\\n            </ion-button>\\n          </section>\\n        </ion-col>\\n      </ion-row>\\n\\n    </form>\\n  </ion-list>\\n\\n</ion-content>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PastorPage } from './pastor.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PastorPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PastorPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PastorPageRoutingModule } from './pastor-routing.module';\n\nimport { PastorPage } from './pastor.page';\nimport {BrMaskerModule} from \"br-mask\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        PastorPageRoutingModule,\n        ReactiveFormsModule,\n        BrMaskerModule\n    ],\n  declarations: [PastorPage]\n})\nexport class PastorPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Bhc3Rvci9wYXN0b3IucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {DataService} from \"../services/data.service\";\nimport {ToastController} from \"@ionic/angular\";\n\n@Component({\n  selector: 'app-pastor',\n  templateUrl: './pastor.page.html',\n  styleUrls: ['./pastor.page.scss'],\n})\nexport class PastorPage implements OnInit {\n  scheduleForm: FormGroup;\n  submitAttempt: boolean = false;\n  constructor(private formBuilder: FormBuilder, private apiCall: DataService, private toastCtrl: ToastController) { }\n\n  save(){\n    this.submitAttempt = true;\n    if(!this.scheduleForm.valid){\n      console.log(\"INVALID SCHEDULE FORM!\")\n    }else {\n      console.log(this.scheduleForm.value);\n      let postData = this.scheduleForm.value;\n      postData.opt = 'pastor';\n      // submit form details add addItem(userId)\n      this.apiCall.sendData('post/nubia/save', postData, true).subscribe(\n          data => {\n            console.log(data);\n            if(data['status'] === 'ko'){\n              this.presentToast('There was a problem with your submission: '+data['error_description'] );\n            }else{\n              this.presentToast('Schedule Request successfully submitted');\n            }\n          },\n          err => this.presentToast('There was an error with your Schedule request submission: '+err),\n          () => console.log(\"Schedule Request submission Completed\")\n      );\n\n    }\n  }\n\n  async presentToast(msg) {\n\n    const toast = await this.toastCtrl.create({\n      message: msg,\n      duration: 3000,\n      position: 'middle'\n    });\n\n    await toast.present();\n    toast.onDidDismiss().then((val) => {\n      console.log('Toast Dismissed: '+ val);\n    });\n  }\n\n  ngOnInit() {\n    this.scheduleForm = this.formBuilder.group({\n      fname: ['', Validators.compose([Validators.maxLength(30), Validators.pattern('[a-zA-Z ]*'), Validators.required])],\n      lname: ['', Validators.compose([Validators.maxLength(30), Validators.pattern('[a-zA-Z ]*'), Validators.required])],\n      email: ['', Validators.compose([Validators.required])],\n      phone: ['', Validators.compose([Validators.required])],\n      comment: ['', Validators.compose([Validators.required])],\n      contact_date: ['', Validators.compose([Validators.required])],\n      contact_time: ['', Validators.compose([Validators.required])]\n    });\n  }\n\n}\n"]}