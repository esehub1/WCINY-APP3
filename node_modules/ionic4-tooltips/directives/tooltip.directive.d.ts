import { AfterViewInit, ApplicationRef, ComponentFactoryResolver, ElementRef, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { Platform } from '@ionic/angular';
import { TooltipController } from '../controllers/tooltip.cotroller';
import { TooltipEvent } from '../models/tooltip-event.model';
import * as ɵngcc0 from '@angular/core';
export declare class TooltipDirective implements OnInit, AfterViewInit, OnDestroy {
    private el;
    private appRef;
    private platform;
    private cfr;
    private tooltipCtrl;
    private vcr;
    debounce: number;
    desktopEvent: TooltipEvent;
    event: TooltipEvent;
    hideOthers: boolean;
    leftOffset: number;
    mobileEvent: TooltipEvent;
    positionV: string;
    positionH: string;
    role: string;
    tooltip: string;
    tooltipHtml: string;
    tooltipStyles: {
        [key: string]: string;
    };
    topOffset: number;
    navTooltip: boolean;
    arrow: boolean;
    duration: number;
    active: boolean;
    private _active;
    private _arrow;
    private _canShow;
    private _debouncedPromise;
    private _navTooltip;
    private _tooltipElement;
    private _tooltipTimeout;
    constructor(el: ElementRef, appRef: ApplicationRef, platform: Platform, cfr: ComponentFactoryResolver, tooltipCtrl: TooltipController, vcr: ViewContainerRef);
    ngOnInit(): void;
    /**
     * Show the tooltip immediately after initiating view if set to
     */
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Set the canShow property
     * Ensure that tooltip is shown only if the tooltip string is not falsey
     */
    /**
    * @return TRUE if the tooltip can be shown
    */
    canShow: boolean;
    /**
     * Handles the click/press event and shows a tooltip.
     * If a tooltip already exists, it will just reset it's timer.
     */
    trigger(): void;
    /**
     * Creates a new tooltip component and adjusts it's properties to show properly.
     */
    showTooltip(): void;
    onClick(): void;
    onPress(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    private _createTooltipComponent;
    private _getTooltipPosition;
    removeTooltip(): void;
    private _resetTimer;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TooltipDirective, "[tooltip]", never, { "debounce": "debounce"; "desktopEvent": "desktopEvent"; "tooltipStyles": "tooltipStyles"; "duration": "duration"; "navTooltip": "navTooltip"; "arrow": "arrow"; "active": "active"; "event": "event"; "positionV": "positionV"; "hideOthers": "hideOthers"; "leftOffset": "leftOffset"; "mobileEvent": "mobileEvent"; "positionH": "positionH"; "role": "role"; "tooltip": "tooltip"; "tooltipHtml": "tooltipHtml"; "topOffset": "topOffset"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7IFRvb2x0aXBDb250cm9sbGVyIH0gZnJvbSAnLi4vY29udHJvbGxlcnMvdG9vbHRpcC5jb3Ryb2xsZXInO1xuaW1wb3J0IHsgVG9vbHRpcEV2ZW50IH0gZnJvbSAnLi4vbW9kZWxzL3Rvb2x0aXAtZXZlbnQubW9kZWwnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9vbHRpcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgYXBwUmVmO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgcHJpdmF0ZSBjZnI7XG4gICAgcHJpdmF0ZSB0b29sdGlwQ3RybDtcbiAgICBwcml2YXRlIHZjcjtcbiAgICBkZWJvdW5jZTogbnVtYmVyO1xuICAgIGRlc2t0b3BFdmVudDogVG9vbHRpcEV2ZW50O1xuICAgIGV2ZW50OiBUb29sdGlwRXZlbnQ7XG4gICAgaGlkZU90aGVyczogYm9vbGVhbjtcbiAgICBsZWZ0T2Zmc2V0OiBudW1iZXI7XG4gICAgbW9iaWxlRXZlbnQ6IFRvb2x0aXBFdmVudDtcbiAgICBwb3NpdGlvblY6IHN0cmluZztcbiAgICBwb3NpdGlvbkg6IHN0cmluZztcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgdG9vbHRpcDogc3RyaW5nO1xuICAgIHRvb2x0aXBIdG1sOiBzdHJpbmc7XG4gICAgdG9vbHRpcFN0eWxlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0b3BPZmZzZXQ6IG51bWJlcjtcbiAgICBuYXZUb29sdGlwOiBib29sZWFuO1xuICAgIGFycm93OiBib29sZWFuO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2FjdGl2ZTtcbiAgICBwcml2YXRlIF9hcnJvdztcbiAgICBwcml2YXRlIF9jYW5TaG93O1xuICAgIHByaXZhdGUgX2RlYm91bmNlZFByb21pc2U7XG4gICAgcHJpdmF0ZSBfbmF2VG9vbHRpcDtcbiAgICBwcml2YXRlIF90b29sdGlwRWxlbWVudDtcbiAgICBwcml2YXRlIF90b29sdGlwVGltZW91dDtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgcGxhdGZvcm06IFBsYXRmb3JtLCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdG9vbHRpcEN0cmw6IFRvb2x0aXBDb250cm9sbGVyLCB2Y3I6IFZpZXdDb250YWluZXJSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgdG9vbHRpcCBpbW1lZGlhdGVseSBhZnRlciBpbml0aWF0aW5nIHZpZXcgaWYgc2V0IHRvXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNhblNob3cgcHJvcGVydHlcbiAgICAgKiBFbnN1cmUgdGhhdCB0b29sdGlwIGlzIHNob3duIG9ubHkgaWYgdGhlIHRvb2x0aXAgc3RyaW5nIGlzIG5vdCBmYWxzZXlcbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEByZXR1cm4gVFJVRSBpZiB0aGUgdG9vbHRpcCBjYW4gYmUgc2hvd25cbiAgICAqL1xuICAgIGNhblNob3c6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgY2xpY2svcHJlc3MgZXZlbnQgYW5kIHNob3dzIGEgdG9vbHRpcC5cbiAgICAgKiBJZiBhIHRvb2x0aXAgYWxyZWFkeSBleGlzdHMsIGl0IHdpbGwganVzdCByZXNldCBpdCdzIHRpbWVyLlxuICAgICAqL1xuICAgIHRyaWdnZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRvb2x0aXAgY29tcG9uZW50IGFuZCBhZGp1c3RzIGl0J3MgcHJvcGVydGllcyB0byBzaG93IHByb3Blcmx5LlxuICAgICAqL1xuICAgIHNob3dUb29sdGlwKCk6IHZvaWQ7XG4gICAgb25DbGljaygpOiB2b2lkO1xuICAgIG9uUHJlc3MoKTogdm9pZDtcbiAgICBvbk1vdXNlRW50ZXIoKTogdm9pZDtcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcbiAgICBwcml2YXRlIF9jcmVhdGVUb29sdGlwQ29tcG9uZW50O1xuICAgIHByaXZhdGUgX2dldFRvb2x0aXBQb3NpdGlvbjtcbiAgICByZW1vdmVUb29sdGlwKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfcmVzZXRUaW1lcjtcbn1cbiJdfQ==