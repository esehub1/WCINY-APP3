/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var TooltipController = /** @class */ (function () {
    function TooltipController() {
        this.allowMultiple = true;
        this.activeTooltips = [];
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    TooltipController.prototype.addTooltip = /**
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {
            this.hideAll();
        }
        this.activeTooltips.push(instance);
    };
    /**
     * @param {?} instance
     * @return {?}
     */
    TooltipController.prototype.removeTooltip = /**
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);
    };
    /**
     * @return {?}
     */
    TooltipController.prototype.hideAll = /**
     * @return {?}
     */
    function () {
        this.activeTooltips.forEach((/**
         * @param {?} tooltip
         * @return {?}
         */
        function (tooltip) {
            tooltip.removeTooltip();
        }));
    };
    TooltipController.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ TooltipController.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TooltipController_Factory() { return new TooltipController(); }, token: TooltipController, providedIn: "root" });
    return TooltipController;
}());
export { TooltipController };
if (false) {
    /** @type {?} */
    TooltipController.prototype.allowMultiple;
    /** @type {?} */
    TooltipController.prototype.activeTooltips;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb3Ryb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYzQtdG9vbHRpcHMvIiwic291cmNlcyI6WyJjb250cm9sbGVycy90b29sdGlwLmNvdHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFHekM7SUFBQTtRQUlTLGtCQUFhLEdBQVcsSUFBSSxDQUFDO1FBQzdCLG1CQUFjLEdBQXNCLEVBQUUsQ0FBQztLQXFCL0M7Ozs7O0lBbkJDLHNDQUFVOzs7O0lBQVYsVUFBVyxRQUF5QjtRQUNsQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoRixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVELHlDQUFhOzs7O0lBQWIsVUFBYyxRQUF5QjtRQUNyQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7O0lBRUQsbUNBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1FBQ3pCLFVBQUMsT0FBd0I7WUFDdkIsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzFCLENBQUMsRUFDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBekJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs0QkFMRDtDQTZCQyxBQTFCRCxJQTBCQztTQXZCWSxpQkFBaUI7OztJQUM1QiwwQ0FBb0M7O0lBQ3BDLDJDQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Rvb2x0aXBEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdG9vbHRpcC5kaXJlY3RpdmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVG9vbHRpcENvbnRyb2xsZXIge1xuICBwdWJsaWMgYWxsb3dNdWx0aXBsZTpib29sZWFuID0gdHJ1ZTtcbiAgcHVibGljIGFjdGl2ZVRvb2x0aXBzOlRvb2x0aXBEaXJlY3RpdmVbXSA9IFtdO1xuXG4gIGFkZFRvb2x0aXAoaW5zdGFuY2U6VG9vbHRpcERpcmVjdGl2ZSk6dm9pZCB7XG4gICAgaWYgKGluc3RhbmNlLmhpZGVPdGhlcnMgfHwgIXRoaXMuYWxsb3dNdWx0aXBsZSAmJiB0aGlzLmFjdGl2ZVRvb2x0aXBzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuaGlkZUFsbCgpO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZlVG9vbHRpcHMucHVzaChpbnN0YW5jZSk7XG4gIH1cblxuICByZW1vdmVUb29sdGlwKGluc3RhbmNlOlRvb2x0aXBEaXJlY3RpdmUpOnZvaWQge1xuICAgIHRoaXMuYWN0aXZlVG9vbHRpcHMuc3BsaWNlKHRoaXMuYWN0aXZlVG9vbHRpcHMuaW5kZXhPZihpbnN0YW5jZSksIDEpO1xuICB9XG5cbiAgaGlkZUFsbCgpOnZvaWQge1xuICAgIHRoaXMuYWN0aXZlVG9vbHRpcHMuZm9yRWFjaChcbiAgICAgICh0b29sdGlwOlRvb2x0aXBEaXJlY3RpdmUpID0+IHtcbiAgICAgICAgdG9vbHRpcC5yZW1vdmVUb29sdGlwKCk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuIl19