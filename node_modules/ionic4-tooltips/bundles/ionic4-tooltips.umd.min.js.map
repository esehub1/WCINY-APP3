{"version":3,"sources":["ng://ionic4-tooltips/components/tooltip-box/tooltip-box.component.ts","ng://ionic4-tooltips/controllers/tooltip.cotroller.ts","ng://ionic4-tooltips/models/tooltip-event.model.ts","ng://ionic4-tooltips/directives/tooltip.directive.ts","ng://ionic4-tooltips/tooltips.module.ts"],"names":["TooltipBox","elementRef","rnd","_this","this","fadeState","role","tooltipStyles","init","Promise","resolve","initResolve","Object","defineProperty","prototype","side","setAttribute","getNativeElement","val","setStyle","nativeElement","ngAfterViewInit","Component","args","selector","template","animations","trigger","state","style","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","HostBinding","Input","TooltipController","allowMultiple","activeTooltips","addTooltip","instance","hideOthers","length","hideAll","push","removeTooltip","splice","indexOf","forEach","tooltip","Injectable","providedIn","CLICK","HOVER","PRESS","TooltipDirective","el","appRef","platform","cfr","tooltipCtrl","vcr","debounce","desktopEvent","TooltipEvent","duration","_active","_arrow","_canShow","_debouncedPromise","_navTooltip","canShow","showTooltip","ngOnInit","event","is","mobileEvent","ngOnDestroy","_tooltipElement","destroy","tooltipHtml","show","_resetTimer","setTimeout","_createTooltipComponent","tooltipComponent","text","then","tooltipPosition","_getTooltipPosition","posLeft","left","posTop","top","arrow","arrowPosition","positionV","positionH","_tooltipTimeout","bind","onClick","onPress","onMouseEnter","active","onMouseLeave","componentFactory","resolveComponentFactory","createComponent","positionLeft","positionTop","tooltipNativeElement","rect","getBoundingClientRect","spacing","navTooltip","right","offsetWidth","offsetHeight","bottom","topOffset","leftOffset","width","height","clearTimeout","undefined","Directive","ApplicationRef","Platform","ComponentFactoryResolver","ViewContainerRef","HostListener","TooltipsModule","forRoot","ngModule","providers","NgModule","declarations","entryComponents","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2\n} from '@angular/core';\n\n@Component({\n  selector:    'tooltip-box',\n  templateUrl: 'tooltip-box.component.html',\n  styleUrls: [\n    'tooltip-box.component.scss'\n  ],\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1 })),\n      state('invisible', style({ opacity: 0 })),\n      transition('visible <=> invisible', animate('300ms linear'))\n    ])\n  ],\n  changeDetection:ChangeDetectionStrategy.OnPush\n})\nexport class TooltipBox implements AfterViewInit {\n  @HostBinding('@fade') fadeState:string = 'invisible';\n\n  @Input() role:string = 'status';\n  @Input() text:string;\n  @Input() tooltipHtml:string;\n  @Input() tooltipStyles:{ [key:string]:string; } = {};\n\n  @Input()\n  set arrow(side:string) {\n    this.rnd.setAttribute(\n      this.getNativeElement(),\n      'class',\n      'has-arrow ' + 'arrow-' + side\n    );\n  }\n\n  @Input()\n  set posTop(val:number) {\n    this.rnd.setStyle(\n      this.getNativeElement(),\n      'top',\n      val + 'px'\n    );\n  }\n\n  @Input()\n  set posLeft(val:number) {\n    this.rnd.setStyle(\n      this.getNativeElement(),\n      'left',\n      val + 'px'\n    );\n  }\n\n  private initResolve:Function;\n\n  public init:Promise<void>;\n\n  constructor(\n    public elementRef:ElementRef,\n    private rnd:Renderer2\n  ) {\n    this.init = new Promise<void>(\n      (resolve) => {\n        this.initResolve = resolve;\n    }\n    );\n  }\n\n  getNativeElement():HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  ngAfterViewInit():void {\n    this.initResolve();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TooltipDirective} from '../directives/tooltip.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TooltipController {\n  public allowMultiple:boolean = true;\n  public activeTooltips:TooltipDirective[] = [];\n\n  addTooltip(instance:TooltipDirective):void {\n    if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {\n      this.hideAll();\n    }\n\n    this.activeTooltips.push(instance);\n  }\n\n  removeTooltip(instance:TooltipDirective):void {\n    this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);\n  }\n\n  hideAll():void {\n    this.activeTooltips.forEach(\n      (tooltip:TooltipDirective) => {\n        tooltip.removeTooltip();\n      }\n    );\n  }\n}\n","export enum TooltipEvent {\n  CLICK = 'click',\n  HOVER = 'hover',\n  PRESS = 'press'\n}\n","import {\n  AfterViewInit,\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {Platform} from '@ionic/angular';\n\nimport {TooltipBox} from '../components/tooltip-box/tooltip-box.component';\nimport {TooltipController} from '../controllers/tooltip.cotroller';\nimport {TooltipEvent} from '../models/tooltip-event.model';\n\n@Directive({\n  selector: '[tooltip]',\n})\nexport class TooltipDirective implements OnInit, AfterViewInit, OnDestroy {\n  @Input() debounce:number = 0;\n  @Input() desktopEvent:TooltipEvent = TooltipEvent.HOVER;\n  @Input() event:TooltipEvent;\n  @Input() hideOthers:boolean;\n  @Input() leftOffset:number;\n  @Input() mobileEvent:TooltipEvent;\n  @Input() positionV:string;\n  @Input() positionH:string;\n  @Input() role:string;\n  @Input() tooltip:string;\n  @Input() tooltipHtml:string;\n  @Input() tooltipStyles:{ [key:string]:string; } = {};\n  @Input() topOffset:number;\n\n  @Input()\n  set navTooltip(val:boolean) {\n    this._navTooltip = typeof val !== 'boolean' || val !== false;\n  }\n\n  get navTooltip():boolean {\n    return this._navTooltip;\n  }\n\n  @Input()\n  set arrow(val:boolean) {\n    this._arrow = typeof val !== 'boolean' || val !== false;\n  }\n\n  get arrow():boolean {\n    return this._arrow;\n  }\n\n  @Input() duration = 3000;\n\n  @Input()\n  set active(val:boolean) {\n    this._active = typeof val !== 'boolean' || val !== false;\n\n    this._active && this.canShow ?\n      this.showTooltip() : this.removeTooltip();\n  }\n\n  get active():boolean {\n    return this._active;\n  }\n\n  private _active:boolean = false;\n  private _arrow:boolean = false;\n  private _canShow:boolean = true;\n  private _debouncedPromise = null;\n  private _navTooltip:boolean = false;\n  private _tooltipElement:ComponentRef<TooltipBox>;\n  private _tooltipTimeout:any;\n\n  constructor(\n    private el:ElementRef,\n    private appRef:ApplicationRef,\n    private platform:Platform,\n    private cfr:ComponentFactoryResolver,\n    private tooltipCtrl:TooltipController,\n    private vcr:ViewContainerRef,\n  ) {\n\n  }\n\n  ngOnInit() {\n    if (typeof this.event === 'undefined') {\n      this.event = this.platform.is('mobile') ?\n        this.mobileEvent : this.desktopEvent;\n    }\n\n    // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM\n    // this removes it\n    this.removeTooltip();\n  }\n\n  /**\n   * Show the tooltip immediately after initiating view if set to\n   */\n  ngAfterViewInit() {\n    if (this._active) {\n      this.trigger();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._tooltipElement && typeof this._tooltipElement.destroy === 'function') {\n      this._tooltipElement.destroy();\n    }\n  }\n\n  /**\n   * Set the canShow property\n   * Ensure that tooltip is shown only if the tooltip string is not falsey\n   */\n  set canShow(show: boolean) {\n    this._canShow = show;\n  }\n\n  /**\n   * @return TRUE if the tooltip can be shown\n   */\n  get canShow():boolean {\n    return this._canShow &&\n      ((typeof this.tooltip === 'string' && this.tooltip !== '')\n        || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));\n  }\n\n  /**\n   * Handles the click/press event and shows a tooltip.\n   * If a tooltip already exists, it will just reset it's timer.\n   */\n  trigger():void {\n    if (this.canShow) {\n      if (this._tooltipElement) {\n        this._resetTimer();\n      } else {\n        this.showTooltip();\n      }\n    }\n  }\n\n  /**\n   * Creates a new tooltip component and adjusts it's properties to show properly.\n   */\n  showTooltip():void {\n    this._debouncedPromise = setTimeout(\n      () => {\n        this._debouncedPromise = null;\n\n        this._createTooltipComponent();\n\n        const tooltipComponent: TooltipBox = this._tooltipElement.instance;\n\n        tooltipComponent.role = this.role;\n        tooltipComponent.text = this.tooltip;\n        tooltipComponent.tooltipStyles = this.tooltipStyles;\n        tooltipComponent.tooltipHtml = this.tooltipHtml;\n        tooltipComponent.init.then(() => {\n          const tooltipPosition = this._getTooltipPosition();\n\n          tooltipComponent.posLeft = tooltipPosition.left;\n          tooltipComponent.posTop = tooltipPosition.top;\n\n          tooltipComponent.fadeState = 'visible';\n\n          if (this.arrow) {\n            let arrowPosition;\n            if (this.positionV === 'top') {\n              arrowPosition = 'bottom';\n            } else if (this.positionV === 'bottom') {\n              arrowPosition = 'top';\n            } else if (this.positionH === 'left') {\n              arrowPosition = 'right';\n            } else {\n              arrowPosition = 'left';\n            }\n            tooltipComponent.arrow = arrowPosition;\n          }\n\n          if (!this._active) {\n            this._tooltipTimeout = setTimeout(\n              this.removeTooltip.bind(this),\n              this.duration,\n            );\n          }\n        });\n      },\n      this.debounce\n    );\n  }\n\n  @HostListener('click')\n  onClick():void {\n    if (this.event === TooltipEvent.CLICK) {\n      this.trigger();\n    }\n  }\n\n  @HostListener('press')\n  onPress():void {\n    if (this.event === TooltipEvent.PRESS) {\n      this.trigger();\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter():void {\n    if (this.event === TooltipEvent.HOVER) {\n      this.active = true;\n    }\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave():void {\n    if (this.event === TooltipEvent.HOVER) {\n      this.active = false;\n    }\n  }\n\n  private _createTooltipComponent() {\n    const componentFactory = this.cfr.resolveComponentFactory(TooltipBox);\n    this._tooltipElement = this.vcr.createComponent(componentFactory);\n    this.tooltipCtrl.addTooltip(this);\n  }\n\n  private _getTooltipPosition() {\n    const tooltipNativeElement:HTMLElement = this._tooltipElement.instance.getNativeElement(),\n      el:HTMLElement = this.el.nativeElement,\n      rect:ClientRect = el.getBoundingClientRect();\n\n    let positionLeft:number,\n      positionTop:number,\n      spacing = 10;\n\n    if (this.navTooltip) {\n      this.positionV = 'bottom';\n      this.arrow = false;\n      spacing = 20;\n    }\n\n    if (this.positionH === 'right') {\n      positionLeft = rect.right + spacing;\n    } else if (this.positionH === 'left') {\n      positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;\n      // -79, 19\n    } else if (this.navTooltip) {\n      positionLeft = rect.left + el.offsetWidth / 2;\n    } else {\n      positionLeft = rect.left;\n    }\n\n\n    if (this.positionV === 'top') {\n      positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;\n    } else if (this.positionV === 'bottom') {\n      positionTop = rect.bottom + spacing;\n    } else {\n      positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;\n    }\n\n    this.topOffset++;\n    if (this.topOffset) {\n      positionTop += +this.topOffset;\n    }\n\n    this.leftOffset++;\n    if (this.leftOffset) {\n      positionLeft += +this.leftOffset;\n    }\n\n    if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {\n      positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;\n    } else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {\n      positionLeft = spacing;\n    }\n\n    if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {\n      positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;\n    } else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {\n      positionTop = spacing;\n    }\n\n    return {\n      left: positionLeft,\n      top:  positionTop,\n    };\n  }\n\n  removeTooltip() {\n    if (this._debouncedPromise) {\n      clearTimeout(this._debouncedPromise);\n\n      this._debouncedPromise = null;\n    }\n\n    if (!this._tooltipElement) {\n      this._tooltipElement = undefined;\n      this._tooltipTimeout = undefined;\n      return;\n    }\n\n    this._tooltipElement.instance.fadeState = 'invisible';\n\n    this.canShow = false;\n\n    // wait for animation to finish then clear everything out\n    setTimeout(\n      () => {\n        if (\n          this._tooltipElement &&\n          typeof this._tooltipElement.destroy === 'function'\n        ) {\n          this._tooltipElement.destroy();\n        }\n        this.tooltipCtrl.removeTooltip(this);\n        this._tooltipElement = this._tooltipTimeout = undefined;\n        this.canShow = true;\n      },\n      300\n    );\n  }\n\n  private _resetTimer():void {\n    clearTimeout(this._tooltipTimeout);\n    this._tooltipTimeout = setTimeout(() => {\n      this.active = false;\n    }, this.duration);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {TooltipBox} from './components/tooltip-box/tooltip-box.component';\nimport {TooltipController} from './controllers/tooltip.cotroller';\nimport {TooltipDirective} from './directives/tooltip.directive';\n\n@NgModule({\n  declarations: [\n    TooltipDirective,\n    TooltipBox\n  ],\n  entryComponents: [\n    TooltipBox\n  ],\n  exports: [\n    TooltipDirective\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class TooltipsModule {\n  static forRoot():ModuleWithProviders {\n    return {\n      ngModule: TooltipsModule,\n      providers: [\n        TooltipController\n      ],\n    };\n  }\n}\n"]}